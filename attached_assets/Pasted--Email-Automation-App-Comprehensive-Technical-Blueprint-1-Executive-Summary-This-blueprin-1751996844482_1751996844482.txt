# Email Automation App - Comprehensive Technical Blueprint

## 1. Executive Summary
This blueprint outlines a complete email automation application that handles all aspects of email management including:
- Intelligent email categorization and prioritization
- Automated responses based on machine learning
- Scheduled email sending
- Email template management
- Contact relationship tracking
- Analytics and reporting

## 2. Technical Architecture
**Frontend**: React.js with TypeScript, Material-UI
**Backend**: Node.js with Express, TypeScript
**Database**: PostgreSQL with Redis caching
**Email Processing**: Nodemailer with IMAP/SMTP integration
**AI/NLP**: TensorFlow.js for client-side processing, Python microservice for heavy ML
**Authentication**: JWT with OAuth2 for email provider integration
**Deployment**: Docker containers on AWS ECS with RDS for PostgreSQL

## 3. Database Design

### Complete SQL Schema

```sql
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    name VARCHAR(100) NOT NULL,
    email_provider VARCHAR(50) NOT NULL,
    oauth_token TEXT,
    oauth_refresh_token TEXT,
    oauth_expires_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE email_accounts (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    email VARCHAR(255) UNIQUE NOT NULL,
    imap_host VARCHAR(255) NOT NULL,
    imap_port INTEGER NOT NULL,
    smtp_host VARCHAR(255) NOT NULL,
    smtp_port INTEGER NOT NULL,
    is_primary BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE email_templates (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(100) NOT NULL,
    subject VARCHAR(255) NOT NULL,
    body TEXT NOT NULL,
    variables JSONB,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE contacts (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    email VARCHAR(255) NOT NULL,
    name VARCHAR(100),
    company VARCHAR(100),
    relationship_score INTEGER DEFAULT 50,
    last_contacted TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    UNIQUE(user_id, email)
);

CREATE TABLE email_rules (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(100) NOT NULL,
    conditions JSONB NOT NULL,
    actions JSONB NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    priority INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE emails (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    account_id INTEGER REFERENCES email_accounts(id) ON DELETE CASCADE,
    message_id VARCHAR(255) UNIQUE NOT NULL,
    thread_id VARCHAR(255),
    from_email VARCHAR(255) NOT NULL,
    to_emails VARCHAR(255)[] NOT NULL,
    cc_emails VARCHAR(255)[],
    bcc_emails VARCHAR(255)[],
    subject VARCHAR(255) NOT NULL,
    body TEXT NOT NULL,
    body_plain TEXT,
    is_read BOOLEAN DEFAULT FALSE,
    is_starred BOOLEAN DEFAULT FALSE,
    is_important BOOLEAN DEFAULT FALSE,
    category VARCHAR(50),
    sentiment_score DECIMAL(3,2),
    received_at TIMESTAMP NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE email_actions (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    email_id INTEGER REFERENCES emails(id) ON DELETE CASCADE,
    action_type VARCHAR(50) NOT NULL,
    action_data JSONB,
    performed_at TIMESTAMP DEFAULT NOW(),
    status VARCHAR(20) DEFAULT 'pending'
);

CREATE TABLE email_analytics (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    date DATE NOT NULL,
    emails_received INTEGER DEFAULT 0,
    emails_sent INTEGER DEFAULT 0,
    response_time_minutes INTEGER,
    important_emails INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW(),
    UNIQUE(user_id, date)
);
```

## 4. Backend Implementation

### Core API Endpoints with Complete Implementation

#### Email Processing Service

```typescript
import { Request, Response } from 'express';
import { ImapFlow } from 'imapflow';
import { simpleParser } from 'mailparser';
import { createTransport } from 'nodemailer';
import { analyzeSentiment } from '../services/nlp';
import { categorizeEmail } from '../services/classification';

// Connect to IMAP and process emails
export const syncEmails = async (req: Request, res: Response) => {
    const { userId } = req.params;
    const account = await EmailAccount.findOne({ where: { user_id: userId, is_primary: true } });
    
    if (!account) {
        return res.status(404).json({ error: 'No email account configured' });
    }

    const client = new ImapFlow({
        host: account.imap_host,
        port: account.imap_port,
        auth: {
            user: account.email,
            pass: account.oauth_token || account.password
        },
        logger: false
    });

    try {
        await client.connect();
        const lock = await client.getMailboxLock('INBOX');
        
        try {
            const messages = [];
            for await (const message of client.fetch('1:*', { envelope: true, bodyStructure: true })) {
                const { uid, envelope } = message;
                const mail = await simpleParser(await client.download(uid));
                
               