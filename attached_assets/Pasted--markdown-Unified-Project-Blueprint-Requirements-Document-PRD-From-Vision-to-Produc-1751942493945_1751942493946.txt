```markdown
# **Unified Project Blueprint & Requirements Document (PRD)**
## From Vision to Production-Ready Code in a Single Document

---

### **Project Metadata**
- **Project Name:** `ContentCraft`
- **Version:** `1.0`
- **Status:** `Approved`
- **Owner(s):** `Lovable 2.0 Development Team`
- **Last Updated:** `2023-10-15`

---

## **1. The Product Vision (The "What & Why")**

### **1.1. Executive Summary**
*   **The Idea:** `AI-powered content creation platform that generates SEO-optimized articles with visual editing capabilities.`
*   **The Goal:** `Enable non-technical users to produce professional-grade content 10x faster through AI-assisted workflows.`

### **1.2. Problem Statement**
`Small business owners and marketers struggle to create high-quality content consistently due to limited resources, writing skills, and technical SEO knowledge.`

### **1.3. Target Audience & User Personas**
- **Primary Audience:** `SMB owners, content marketers, and solopreneurs`
- **User Persona 1: Marketing Manager Maya**
    - **Goal:** `Produce 20 SEO-optimized blog posts/month with minimal effort`
    - **Pain Point:** `Lacks writing team and SEO expertise`
- **User Persona 2: Startup Founder Sam**
    - **Goal:** `Create landing page copy that converts visitors`
    - **Pain Point:** `Limited budget for copywriters`

### **1.4. Core User Stories / Epics**
- **(Epic 1):** `As a user, I want to generate SEO-optimized articles using AI prompts so I can create content faster`
- **(Epic 2):** `As a user, I want to visually edit generated content with drag-and-drop components so I can customize without coding`
- **(Epic 3):** `As a user, I want to publish content directly to my CMS/website so I can streamline my workflow`

### **1.5. Success Metrics (KPIs)**
- **Adoption:** `500 active users within 2 months of launch`
- **Engagement:** `Average 7 content pieces created/user/week`
- **Quality:** `80%+ user satisfaction with generated content quality`

---

## **2. The Technical Blueprint (The "How")**

### **2.1. Layer 1: Core Build Prompts & Tasks**
- **UI Component:** `Create a React component using Tailwind CSS and shadcn/ui that includes: 1) AI prompt input field with examples 2) Real-time content preview panel 3) Drag-and-drop editing toolbar for text/image components. Use Lovable's visual builder compatible props.`
  
- **API Endpoint:** `Implement a Supabase Edge Function in Node.js that: 1) Accepts user prompt and tone parameters 2) Calls Anthropic Claude 3.7 Sonnet API 3) Returns structured JSON with title, sections, and SEO metadata. Validate inputs with Zod.`

- **Database Schema:** `Design a PostgreSQL schema for content pieces: 1) 'projects' table (id, user_id, title, created_at) 2) 'content_versions' table (id, project_id, content_json, seo_metadata) 3) 'publish_targets' table (id, project_id, cms_type, api_config). Create relationships with foreign keys.`

### **2.2. Layer 2: Master Architecture**
- **Technology Stack:**
    - **Frontend:** `React 18 + TypeScript, Vite, Tailwind CSS, shadcn/ui`
    - **Backend:** `Supabase Edge Functions (Node.js), Supabase Auth`
    - **Database:** `Supabase PostgreSQL`
    - **AI Model:** `Anthropic Claude 3.7 Sonnet + Replicate for image generation`
    - **Primary Hosting Platform:** `Lovable Hosting with custom domain`

- **System Architecture Diagram:**
    ```mermaid
    graph TD
        A[React Frontend] -->|API Calls| B[Supabase Edge Functions]
        B -->|Auth| C[Supabase Auth]
        B -->|Data| D[Supabase PostgreSQL]
        B -->|AI Calls| E[Anthropic Claude API]
        B -->|Image Gen| F[Replicate API]
        A -->|Real-time| G[Supabase Realtime]
        H[Lovable Security Scan] -->|Audits| A
        H -->|Audits| B
        I[Lovable Hosting] -->|Deploys| A
    ```

- **Folder & Component Structure:**
    ```
    src/
    ├── components/
    │   ├── editor/
    │   │   ├── ContentCanvas.tsx
    │   │   ├── Toolbar.tsx
    │   │   └── ElementLibrary.tsx
    │   ├── ai/
    │   │   ├── PromptInput.tsx
    │   │   └── AISuggestions.tsx
    │   └── publishing/
    │       └── ExportPanel.tsx
    ├── lib/
    │   ├── supabaseClient.ts
    │   └── aiService.ts
    ├── pages/
    │   ├── Dashboard.tsx
    │   ├── Editor.tsx
    │   └── Settings.tsx
    └── styles/
        └── tailwind.css
    ```

- **Data Models & Schema:**
    ```sql
    -- Projects
    CREATE TABLE projects (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id UUID REFERENCES auth.users,
        title TEXT NOT NULL,
        created_at TIMESTAMPTZ DEFAULT NOW()
    );

    -- Content Versions
    CREATE TABLE content_versions (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        project_id UUID REFERENCES projects ON DELETE CASCADE,
        content_json JSONB NOT NULL,
        seo_metadata JSONB,
        created_at TIMESTAMPTZ DEFAULT NOW()
    );

    -- Publish Targets
    CREATE TABLE publish_targets (
        id UUID PRIMARY DEFAULT gen_random_uuid(),
        project_id UUID REFERENCES projects ON DELETE CASCADE,
        cms_type TEXT NOT NULL, -- e.g., 'WordPress', 'Webflow'
        api_config JSONB NOT NULL -- encrypted API keys
    );
    ```

- **API Endpoints (Contract):**
    - `POST /api/generate-content → {prompt: string, tone: string} → Returns {title: string, sections: array, keywords: array}`
    - `POST /api/save-version → {project_id: UUID, content: JSON} → Returns {version_id: UUID}`
    - `POST /api/publish → {project_id: UUID, target_id: UUID} → Returns {success: bool, url: string}`

### **2.3. Layer 3: Refactor & Optimization Engine**
- **Component Splitting:** `Implement atomic design pattern: 1) Break editor into Canvas/Element/PropertyPanel 2) Isolate AI service calls into custom hooks 3) Create reusable auth wrapper components`
- **Performance Bottlenecks:** `Implement content version diffing to only save changed elements. Use React.memo for editor components.`

### **2.4. Layer 4: Error Recovery & Resilience**
- **Error Patterns:** `Handle Anthropic API rate limits with exponential backoff retries in Edge Functions. Store draft content in localStorage during network failures.`
- **Debugging Strategies:** `Implement Lovable's Error Boundary components with Supabase error logging integration.`

### **2.5. Layer 5: Platform & Deployment Strategy**
- **Target Platform(s):** `Lovable 2.0`
- **Deployment Workflow:** `1) Connect GitHub repo 2) Configure build command (vite build) 3) Set Lovable hosting domain 4) Enable auto-deploy on main branch`
- **Environment Variables:**
    - `SUPABASE_URL`
    - `SUPABASE_ANON_KEY`
    - `ANTHROPIC_API_KEY`
    - `REPLICATE_API_TOKEN`

---

## **3. Quality & Execution Framework**

### **3.1. Development Standards**
□ **Code Style:** `ESLint + Prettier with Lovable React/TypeScript config`
□ **Testing:** `Vitest + React Testing Library (70% coverage target)`
□ **Version Control:** `All work on feature branches, merged via Pull Requests`

### **3.2. Performance Benchmarks**
□ **First Contentful Paint (FCP):** `< 1.2s`
□ **Largest Contentful Paint (LCP):** `< 1.8s`
□ **AI Response Time (p95):** `< 2.5s`

### **3.3. User Experience & Accessibility (UX/UI)**
□ **Responsive Design:** `Mobile-first editor layout`
□ **Accessibility:** `WCAG 2.1 AA compliant editor`
□ **UI States:** `Skeleton loaders for AI generation, error toasts`

---

## **4. Project Management & Logistics**

### **4.1. Implementation Phases & Timeline**
- **Phase 1: Core Infrastructure (2 Days):** `Supabase setup, Auth integration, AI service wiring`
- **Phase 2: Content Editor (3 Days):** `Drag-and-drop canvas, component library, version saving`
- **Phase 3: Publishing Workflows (2 Days):** `CMS integrations, Lovable Security Scan integration`
- **Phase 4: Polishing (1 Day):** `Responsive design, accessibility audit`

### **4.2. Future Scope & Version 2.0 Ideas**
- `Multi-user collaboration with real-time co-editing`
- `AI-powered content performance analytics dashboard`
- `Template marketplace for user-generated components`

---

*Generated by the NoCodeLos Blueprint Stack v3.1*
*"The single document that replaces meetings."*
```

**Key Lovable 2.0 Implementation Notes:**

1. **Supabase Integration Strategy:**
   - Use Row Level Security (RLS) for all database tables
   - Implement real-time updates for collaborative features using Supabase Realtime
   - Store encrypted API keys in publish_targets table with pgcrypto

2. **Visual Development Optimization:**
   - Component props use clear naming conventions (e.g., `contentData`, `onUpdate`)
   - All UI components designed as atomic units for drag-and-drop composition
   - Style overrides through Tailwind CSS classes only

3. **AI Implementation Details:**
   - Claude 3.7 prompt engineering for SEO optimization:
     ```javascript
     const prompt = `
     Generate SEO-optimized content about: ${topic}
     Tone: ${tone}
     Structure: 
     - 800-1000 words 
     - H2 subheadings every 200 words
     - 3-5 primary keywords
     - Meta description under 160 chars
     `
     ```
   - Replicate for image generation with prompt: `"Professional blog header image about ${topic}"`

4. **Security Scanning:**
   - Enable Lovable Security Scan during deployment phase
   - Weekly automated vulnerability scans
   - JWT token validation for all Edge Functions

5. **Performance Optimization:**
   - Vite for fast HMR during development
   - Supabase connection pooling
   - Lazy-load AI suggestions component
   - Cache frequent API responses with Supabase Edge Caching

6. **Cost Management:**
   - Monitor Anthropic token usage per user
   - Implement usage quotas in free tier
   - Use Supabase's free tier for initial launch

**Development Workflow:**
1. Create Lovable project via dashboard
2. Connect GitHub repository
3. Build UI components using visual editor
4. Create Edge Functions via Supabase dashboard
5. Configure database schema with migrations
6. Enable Lovable Security Scan
7. Deploy to custom domain

This blueprint provides a production-ready implementation plan fully optimized for Lovable 2.0's capabilities, with all security, performance, and scalability considerations built-in.