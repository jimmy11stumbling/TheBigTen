## Unified Project Blueprint: Modern Dating Application

### Executive Summary
**Application Name:** ConnectSpark  
**Core Concept:** Geo-location based dating app with swipe mechanics, real-time chat, and AI-powered matching  
**Target Audience:** 18-50 year olds seeking romantic connections  
**Technical Approach:** Full-stack implementation leveraging Lovable 2.0's Supabase integration with React frontend  
**Development Timeline:** 8-10 weeks (team of 3 developers)  
**Infrastructure Cost:** $1,200/month at 100K users (Supabase Pro + Cloudflare)  

---

### Technical Architecture Overview
```mermaid
graph TD
    A[React Frontend] --> B[Supabase Edge Functions]
    A --> C[Supabase Realtime]
    B --> D[Supabase PostgreSQL]
    C --> D
    D --> E[PostGIS Extension]
    F[Cloudinary] --> A
    G[Stripe] --> B
    H[Replicate AI] --> I[Photo Verification]
```

---

### 1. Technology Stack Specification
| Component           | Technology                          | Version  | Lovable Integration |
|---------------------|-------------------------------------|----------|---------------------|
| Frontend Framework  | React with Vite                     | 18.2.0   | Native support      |
| State Management    | Zustand + React Query               | 4.0.0    | Visual state hooks  |
| UI Components       | shadcn/ui + Tailwind CSS            | 3.4.0    | Drag-and-drop ready |
| Backend Services    | Supabase Edge Functions             | Node 20  | Full integration    |
| Database            | Supabase PostgreSQL (PostGIS)       | 15       | Direct access       |
| Real-time           | Supabase Realtime                   | 2.0      | Native channel API  |
| Storage             | Supabase Storage + Cloudinary       | -        | Visual config       |
| Payments            | Stripe Elements                     | Latest   | Pre-built component |
| Location Services   | Google Maps API                     | 3.55     | API connector       |
| AI Services         | Replicate (Photo Verification)      | -        | Visual workflow     |

---

### 2. Database Schema (Supabase PostgreSQL)
```sql
-- Users Table
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email TEXT UNIQUE NOT NULL,
  password TEXT,
  phone TEXT,
  verified BOOLEAN DEFAULT FALSE,
  verification_photo TEXT,
  verification_status TEXT CHECK(status IN ('pending','approved','rejected')),
  last_active TIMESTAMPTZ DEFAULT NOW(),
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Profiles Table
CREATE TABLE profiles (
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  bio TEXT,
  dob DATE NOT NULL,
  gender TEXT,
  interests JSONB,
  preferences JSONB,
  location GEOGRAPHY(POINT, 4326),
  max_distance INTEGER DEFAULT 50,
  min_age INTEGER DEFAULT 18,
  max_age INTEGER DEFAULT 99,
  photo_urls TEXT[],
  premium BOOLEAN DEFAULT FALSE,
  boost_available INTEGER DEFAULT 0
);

-- Swipes Table
CREATE TABLE swipes (
  id BIGSERIAL PRIMARY KEY,
  swiper UUID REFERENCES users(id) ON DELETE CASCADE,
  swiped UUID REFERENCES users(id) ON DELETE CASCADE,
  direction TEXT CHECK(direction IN ('like','pass','superlike')),
  timestamp TIMESTAMPTZ DEFAULT NOW(),
  UNIQUE (swiper, swiped)
);

-- Matches Table
CREATE TABLE matches (
  id BIGSERIAL PRIMARY KEY,
  user1 UUID REFERENCES users(id) ON DELETE CASCADE,
  user2 UUID REFERENCES users(id) ON DELETE CASCADE,
  matched_at TIMESTAMPTZ DEFAULT NOW(),
  UNIQUE (user1, user2)
);

-- Messages Table
CREATE TABLE messages (
  id BIGSERIAL PRIMARY KEY,
  match_id BIGINT REFERENCES matches(id) ON DELETE CASCADE,
  sender UUID REFERENCES users(id) ON DELETE CASCADE,
  content TEXT,
  sent_at TIMESTAMPTZ DEFAULT NOW(),
  read BOOLEAN DEFAULT FALSE
);
```

**Indexes:**
```sql
CREATE INDEX idx_profiles_location ON profiles USING GIST(location);
CREATE INDEX idx_swipes_timestamp ON swipes(timestamp);
CREATE INDEX idx_messages_match_id ON messages(match_id);
```

---

### 3. Core System Components

#### A. Authentication Flow (Supabase Auth)
```tsx
// auth.service.ts
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_ANON_KEY!
);

export const signUpWithEmail = async (email: string, password: string) => {
  return await supabase.auth.signUp({
    email,
    password,
    options: {
      data: { verification_status: 'pending' }
    }
  });
};

export const verifyPhoto = async (userId: string, imageUrl: string) => {
  // Replicate AI verification
  const verificationResult = await fetchReplicateVerification(imageUrl);
  
  await supabase
    .from('users')
    .update({ 
      verification_photo: imageUrl,
      verification_status: verificationResult.valid ? 'approved' : 'rejected'
    })
    .eq('id', userId);
};
```

#### B. Swipe Component (React + Framer Motion)
```tsx
// SwipeCard.tsx
import { useGesture } from '@use-gesture/react';
import { animated, useSpring } from '@react-spring/web';

export function SwipeCard({ profile, onSwipe }: SwipeCardProps) {
  const [style, api] = useSpring(() => ({ x: 0, y: 0, rotate: 0 }));
  
  const bind = useGesture({
    onDrag: ({ down, movement: [mx], direction: [dx] }) => {
      const x = down ? mx : 0;
      const rotate = down ? mx * 0.1 : 0;
      
      if (!down && Math.abs(mx) > 100) {
        onSwipe(dx > 0 ? 'like' : 'pass');
      }
      
      api.start({ x, rotate, immediate: down });
    }
  });

  return (
    <animated.div {...bind()} style={style}>
      <ProfileCard profile={profile} />
    </animated.div>
  );
}
```

#### C. Matching Algorithm (Supabase Edge Function)
```typescript
// match-algorithm.ts
export const findMatches = async (userId: string) => {
  const { data: user } = await supabase
    .from('profiles')
    .select('location, preferences, max_distance')
    .eq('user_id', userId)
    .single();

  // Find potential matches within distance
  const { data: potentials } = await supabase.rpc('find_nearby_users', {
    current_user_id: userId,
    max_distance: user.max_distance,
    min_age: user.preferences.min_age,
    max_age: user.preferences.max_age
  });

  // Check for mutual likes
  const matches = [];
  for (const potential of potentials) {
    const { count } = await supabase
      .from('swipes')
      .select('*', { count: 'exact' })
      .eq('swiper', potential.id)
      .eq('swiped', userId)
      .eq('direction', 'like');

    if (count > 0) {
      // Create match
      await supabase.from('matches').insert({
        user1: userId,
        user2: potential.id
      });
      
      matches.push(potential.id);
      
      // Send realtime notification
      supabase.channel(`user_${userId}`).send({
        type: 'broadcast',
        event: 'new_match',
        payload: { matchId: potential.id }
      });
    }
  }
  
  return matches;
};
```

---

### 4. Real-Time Communication System
**Architecture:**
1. Supabase Realtime for match notifications
2. WebSockets for chat messages
3. Presence tracking for online status

```tsx
// realtime.service.ts
export const initRealtime = (userId: string) => {
  const channel = supabase.channel(`user_${userId}`);
  
  channel
    .on('presence', { event: 'sync' }, () => {
      const state = channel.presenceState();
      updateOnlineStatus(state);
    })
    .on('broadcast', { event: 'new_message' }, (payload) => {
      displayNewMessage(payload);
    })
    .on('broadcast', { event: 'new_match' }, (payload) => {
      showMatchNotification(payload);
    })
    .subscribe();
  
  // Track presence
  channel.track({ online_at: new Date().toISOString() });
};
```

---

### 5. Location-Based Discovery
**PostGIS Query for Nearby Users:**
```sql
CREATE OR REPLACE FUNCTION find_nearby_users(
  current_user_id UUID,
  max_distance INTEGER,
  min_age INTEGER,
  max_age INTEGER
)
RETURNS TABLE (id UUID, name TEXT, distance FLOAT) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    p.user_id, 
    p.name,
    ST_Distance(
      u.location::geography, 
      p.location::geography
    ) / 1000 AS distance
  FROM profiles p
  JOIN users u ON u.id = current_user_id
  WHERE 
    p.user_id != current_user_id
    AND ST_DWithin(
      u.location::geography, 
      p.location::geography, 
      max_distance * 1000
    )
    AND EXTRACT(YEAR FROM AGE(p.dob)) BETWEEN min_age AND max_age
    AND p.verification_status = 'approved'
  ORDER BY distance;
END;
$$ LANGUAGE plpgsql;
```

---

### 6. Security Implementation
**Safety Measures:**
1. Photo Verification Workflow:
   ```mermaid
   graph LR
     A[User Upload] --> B[Supabase Storage]
     B --> C[Replicate AI Analysis]
     C --> D{Face Detection?}
     D -->|Yes| E[Compare with Profile]
     D -->|No| F[Reject]
     E --> G{Match Confidence > 90%?}
     G -->|Yes| H[Approve]
     G -->|No| I[Manual Review]
   ```

2. Content Moderation:
   - Real-time message scanning using Supabase Triggers
   - Report system with admin dashboard
   - Automatic image moderation with Replicate NSFW detection

3. Privacy Controls:
   - Precise location only during active discovery
   - Distance display instead of exact location
   - Temporary location data storage (auto-delete after 30 days)

---

### 7. Premium Features Implementation
**Stripe Integration Flow:**
```typescript
// payments.service.ts
export const createSubscription = async (userId: string, plan: string) => {
  const customer = await stripe.customers.create({
    email: await getUserEmail(userId),
    metadata: { userId }
  });

  const session = await stripe.checkout.sessions.create({
    customer: customer.id,
    payment_method_types: ['card'],
    line_items: [{
      price: process.env[`${plan}_PRICE_ID`],
      quantity: 1,
    }],
    mode: 'subscription',
    success_url: `${DOMAIN}/success?session_id={CHECKOUT_SESSION_ID}`,
    cancel_url: `${DOMAIN}/cancel`,
  });

  return session.url;
};

// Webhook handler
export const handleWebhook = async (event: Stripe.Event) => {
  switch (event.type) {
    case 'checkout.session.completed':
      const session = event.data.object;
      const userId = session.metadata.userId;
      await activatePremium(userId);
      break;
    case 'customer.subscription.deleted':
      await deactivatePremium(event.data.object.customer);
      break;
  }
};
```

**Premium Features:**
1. Unlimited likes
2. Profile boosts (3x visibility)
3. Super likes (5/week)
4. Advanced filters (ethnicity, education, etc.)
5. Read receipts in chats

---

### 8. Testing Strategy
| Test Type          | Tools               | Coverage Target |
|--------------------|---------------------|-----------------|
| Unit Tests         | Vitest + Testing Library | 85%            |
| Integration Tests  | Playwright          | 90%            |
| Security Tests     | Lovable Security Scan | 100%           |
| Performance Tests  | k6 + Lighthouse     | Core workflows |
| Usability Testing  | UserTesting.com     | 50+ participants |

**Critical Test Cases:**
1. Swipe gesture accuracy across devices
2. Match notification latency (<500ms)
3. Geolocation accuracy variance handling
4. Payment flow edge cases
5. Concurrency under load (10K+ simultaneous swipes)

---

### 9. Deployment Architecture
```mermaid
graph LR
    A[Cloudflare CDN] --> B[Vite Frontend]
    B --> C[Supabase Edge Functions]
    C --> D[Supabase PostgreSQL]
    D --> E[PostGIS Extension]
    F[Cloudinary] --> B
    G[Stripe] --> C
    H[Replicate] --> I[Photo Verification]
```

**Optimization:**
- Image assets via Cloudinary (auto-format, resize, compress)
- Database connection pooling
- Cached geolocation queries
- Lazy-loaded chat components

---

### 10. Monitoring & Maintenance
**Essential Metrics:**
1. Swipe/match conversion rate
2. Message delivery success rate
3. Photo verification processing time
4. Premium conversion funnel
5. Geolocation accuracy

**Alerting Rules:**
- Match latency > 1s
- Verification failure rate > 15%
- Payment error rate > 5%
- Database CPU > 75% for 5min

**Maintenance Procedures:**
- Weekly security scans
- Monthly preference algorithm retraining
- Quarterly privacy audit
- Automated database index optimization

---

### 11. Actionable Build Prompts (Lovable Visual Development)

1. **User Auth Component:**  
   "Create signup/login flow with Supabase Auth, including photo verification step using Replicate API"

2. **Swipe Interface:**  
   "Implement card stack component with swipe gestures using react-swipeable, connected to profiles table"

3. **Matching Engine:**  
   "Build Edge Function that triggers on new swipe to check for mutual likes and create matches"

4. **Real-time Chat:**  
   "Create message component with Supabase Realtime subscription, message status indicators"

5. **Discovery Feed:**  
   "Build location-based user feed with distance filtering using PostGIS functions"

6. **Premium Gateway:**  
   "Implement Stripe checkout flow with success-triggered profile upgrades"

7. **Admin Dashboard:**  
   "Create moderation interface for reported profiles with bulk actions"

8. **Analytics System:**  
   "Build user activity dashboard with swipe/message metrics using Supabase analytics"

9. **Safety Features:**  
   "Implement report flow with screenshot capture and admin notifications"

10. **Notification System:**  
    "Create unified notification center for matches/messages using Supabase Realtime broadcasts"

---

### Compliance & Legal Considerations
1. **GDPR Compliance:**
   - Right to erasure implementation
   - Data processing agreement with Supabase
   - Cookie consent management

2. **Age Verification:**
   - DOB validation during signup
   - Age gates for explicit content
   - Minor protection protocols

3. **Payment Compliance:**
   - PCI-DSS Level 1 via Stripe
   - SCA-ready payment flows
   - Refund policy implementation

---

### Scalability Projections
| User Base  | Infrastructure Requirements            | Estimated Cost |
|------------|----------------------------------------|----------------|
| 10K MAU    | Supabase Pro ($25) + Cloudinary ($50)  | $75/month      |
| 100K MAU   | Supabase Scale ($100) + Cloudflare ($20)| $250/month     |
| 1M+ MAU    | Dedicated DB + Redis caching           | $2,500+/month |

**Scaling Strategy:**
1. Implement read replicas at 50K users
2. Add Redis caching for swipe feeds at 100K users
3. Shard database by geography at 500K users
4. Implement WebSockets cluster for chat at 1M users

---

### Development Timeline
```mermaid
gantt
    title ConnectSpark Development Roadmap
    dateFormat  YYYY-MM-DD
    section Core Infrastructure
    Auth System           :done,    des1, 2024-01-01, 7d
    Database Schema       :active,  des2, 2024-01-08, 5d
    Realtime Services    :          des3, 2024-01-15, 7d
    section User Features
    Profile Creation      :          des4, 2024-01-10, 5d
    Swipe Mechanism       :          des5, 2024-01-17, 10d
    Matching System       :          des6, 2024-01-25, 7d
    section Premium Features
    Payment Integration   :          des7, 2024-02-05, 7d
    Boost System          :          des8, 2024-02-12, 5d
    section Testing
    Security Audit        :          des9, 2024-02-20, 7d
    Load Testing          :          des10, 2024-02-27, 5d
```

**Go-Live Readiness Checklist:**
- [ ] Photo verification accuracy > 92%
- [ ] Match latency < 800ms (p99)
- [ ] Payment success rate > 97%
- [ ] Moderation response time < 24hrs
- [ ] Cross-browser compatibility verified

---

This blueprint provides a production-ready architecture leveraging Lovable 2.0's strengths in rapid development, security scanning, and Supabase integration. The implementation focuses on scalability from day one while maintaining strict privacy standards essential for dating applications.