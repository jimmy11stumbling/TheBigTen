## Social Media App - Unified Project Blueprint & Requirements Document

### Executive Summary
A full-stack social media platform leveraging Lovable 2.0's capabilities for rapid development with enterprise-grade architecture. Supports user profiles, content feeds, real-time interactions, and AI-powered moderation.

---

### 1. Technical Architecture
**System Diagram**  
```mermaid
graph TD
    A[React Frontend] -->|Real-time| B(Supabase Realtime)
    A -->|Auth| C(Supabase Auth)
    A -->|API Calls| D(Edge Functions)
    D --> E[PostgreSQL]
    E --> F[Supabase Storage]
    G[Claude 3.7 Sonnet] -->|Content Moderation| D
    H[Stripe] -->|Payments| D
    I[Replicate] -->|Media Processing| D
```

**Technology Stack**  
- **Frontend**: React 18 + TypeScript, Tailwind CSS, shadcn/ui components  
- **State Management**: Zustand + React Query  
- **Realtime**: Supabase Realtime with WebSockets  
- **Backend**: Supabase Edge Functions (Node.js 20)  
- **Database**: Supabase PostgreSQL (v15)  
- **Auth**: Supabase Auth + Clerk integration  
- **Storage**: Supabase Storage (S3-compatible)  
- **AI**: Claude 3.7 Sonnet (content), Replicate (media)  
- **Payments**: Stripe  
- **Testing**: Vitest, Playwright  
- **Monitoring**: Sentry, Supabase Logflare  

---

### 2. Database Schema (Supabase PostgreSQL)
```sql
-- Profiles Table
CREATE TABLE profiles (
  id UUID REFERENCES auth.users PRIMARY KEY,
  username VARCHAR(30) UNIQUE NOT NULL,
  full_name TEXT,
  avatar_url TEXT,
  bio TEXT,
  website TEXT,
  is_public BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Posts Table
CREATE TABLE posts (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  content TEXT NOT NULL,
  media_urls TEXT[],
  like_count INT DEFAULT 0,
  comment_count INT DEFAULT 0,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Relationships Table
CREATE TABLE relationships (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  follower_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  following_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  UNIQUE (follower_id, following_id)
);

-- Comments Table
CREATE TABLE comments (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  post_id UUID REFERENCES posts(id) ON DELETE CASCADE,
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  content TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Notifications Table
CREATE TABLE notifications (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  type VARCHAR(20) NOT NULL, -- 'like', 'comment', 'follow'
  source_user_id UUID REFERENCES profiles(id),
  post_id UUID REFERENCES posts(id),
  is_read BOOLEAN DEFAULT false,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
```

**Indexes**:
1. `posts(user_id, created_at DESC)` 
2. `relationships(follower_id, following_id)` 
3. `notifications(user_id, is_read)`

---

### 3. Component Architecture (Visual Builder Compatible)
**Core Components**:
1. `<UserProfileCard>`  
   - Props: `userId`, `displayMode` (compact/detailed)  
   - State: `isFollowing`, `followersCount`

2. `<PostFeed>`  
   - Props: `feedType` (following/popular)  
   - State: `posts[]`, `hasMore`

3. `<CreatePostModal>`  
   - Props: `onSubmit`  
   - State: `content`, `mediaFiles[]`

4. `<RealTimeCommentSection>`  
   - Props: `postId`  
   - State: `comments[]`

**Design System**:
- Tailwind CSS with custom theme in `src/theme/theme.config.js`
- shadcn/ui components with dark/light mode support
- Responsive breakpoints: mobile-first grid system

---

### 4. Security Implementation
1. **Row Level Security (RLS) Policies**:
```sql
-- Posts RLS
CREATE POLICY "User can view public posts" 
ON posts FOR SELECT USING (is_public_profile(get_user_id()));

-- Relationships RLS
CREATE POLICY "Users can manage their follows"
ON relationships FOR ALL USING (follower_id = auth.uid());
```

2. **Security Scan Integration**:
- Enable Lovable Security Scan in project settings
- Configure weekly vulnerability assessments
- Critical alerts: SQLi, XSS, auth bypass

3. **Data Protection**:
- AES-256 encryption for sensitive columns
- JWT expiration: 15 minutes access tokens
- Refresh tokens with 7-day rotation

---

### 5. Real-time Features
**Implementation**:
```typescript
// Subscribe to post updates
const channel = supabase.channel('post-feed')
  .on('postgres_changes', {
    event: 'INSERT',
    schema: 'public',
    table: 'posts'
  }, (payload) => {
    // Update feed in real-time
  })
  .subscribe();
```

**Channels**:
1. `global-feed`: New public posts
2. `user-${userId}`: Personal notifications
3. `post-${postId}`: Comment updates

---

### 6. Core Functionality Implementation

**A. Authentication Flow**  
```typescript
// Supabase auth helper
export const authService = {
  login: async (email: string, password: string) => {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password
    });
    // Create profile if new user
    if (data.user && !data.user.user_metadata.profile_created) {
      await createProfile(data.user.id);
    }
  }
};

// Edge Function: createProfile
export default async (req: Request) => {
  const user = await getAuthUser(req);
  await supabase.from('profiles').insert({
    id: user.id,
    username: generateUsername(user.email)
  });
};
```

**B. Content Moderation**  
```typescript
// Edge Function: moderatePost
export default async (req: Request) => {
  const { content } = await req.json();
  const claudeResponse = await anthropic.messages.create({
    model: "claude-3-sonnet-20240229",
    max_tokens: 1000,
    messages: [{
      role: "user",
      content: `Moderate content: ${content}`
    }]
  });
  
  return new Response(JSON.stringify({
    is_approved: !claudeResponse.content.includes('VIOLATION'),
    violations: parseViolations(claudeResponse.content)
  }));
};
```

**C. Feed Algorithm**  
```typescript
// Personalized feed query
const getPersonalizedFeed = async (userId: string, page = 1) => {
  return supabase.rpc('get_feed', {
    current_user_id: userId,
    limit_count: 20,
    offset_count: (page - 1) * 20
  });
};

// PostgreSQL function
CREATE FUNCTION get_feed(current_user_id UUID, limit_count INT, offset_count INT)
RETURNS SETOF posts AS $$
BEGIN
  RETURN QUERY
  SELECT * FROM posts
  WHERE user_id IN (
    SELECT following_id FROM relationships
    WHERE follower_id = current_user_id
  )
  ORDER BY created_at DESC
  LIMIT limit_count OFFSET offset_count;
END;
$$ LANGUAGE plpgsql;
```

---

### 7. Testing Strategy
**Test Coverage**:
```json
// vitest.config.js
export default {
  coverage: {
    thresholds: {
      lines: 85,
      functions: 80,
      branches: 75,
      statements: 85
    }
  }
}
```

**Critical Test Cases**:
1. Auth: Registration flow, password recovery
2. Posts: Creation, deletion, moderation
3. Relationships: Following/unfollowing
4. Performance: Feed loading < 1s P99
5. Security: RLS policy verification

---

### 8. Deployment Configuration
**Lovable Hosting Setup**:
```yaml
# .lovable.config.yaml
project:
  name: social-app
  env: production
supabase:
  project_id: $SUPABASE_PROJECT_ID
  anon_key: $SUPABASE_ANON_KEY
build:
  command: npm run build
  output_dir: dist
environment:
  variables:
    ANTHROPIC_API_KEY: $ANTHROPIC_KEY
    STRIPE_SECRET: $STRIPE_SECRET
```

**CI/CD Pipeline**:
1. Pre-commit: ESLint + Prettier
2. PR: Vitest unit tests
3. Merge: Playwright E2E tests
4. Production: Canary deployment with 5% traffic

---

### 9. Performance Optimization
**Strategies**:
1. **Frontend**:
   - Lazy-load feed items with Intersection Observer
   - React.memo for heavy components
   - Image optimization: WebP format, CDN caching

2. **Backend**:
   - Postgres query optimization
   - Connection pooling (PgBouncer)
   - Edge Functions cold-start mitigation

3. **Database**:
   - Materialized views for aggregated counts
   - Partial indexes for active users
   - Vacuum automation

**Benchmarks**:
- Feed load: < 800ms for 100 items
- API response: < 200ms P95
- Concurrent users: 10,000+ on $100/mo infra

---

### 10. Scalability Plan
**Growth Stages**:
| Users | Architecture | Cost Estimate |
|-------|-------------|---------------|
| < 10K | Single Supabase project | $25/mo |
| 10-50K | Read replicas + Redis cache | $150/mo |
| 50K+ | Sharding + dedicated workers | $500+/mo |

**Scaling Tactics**:
1. Database: Enable read replicas at 10K users
2. Storage: Migrate to dedicated S3 bucket
3. Compute: Add edge function concurrency limits
4. Cache: Implement Redis for feed data

---

### 11. Actionable Build Prompts
1. **Database Setup**:  
   "Create Supabase project with schema from Section 2 and enable RLS"

2. **Auth Implementation**:  
   "Build signup/login flows with Supabase Auth and profile creation"

3. **Post Creation**:  
   "Create media upload component with Supabase Storage integration"

4. **Feed System**:  
   "Implement infinite-scroll feed with real-time updates"

5. **Notifications**:  
   "Build push notification system using Supabase Realtime"

6. **Moderation**:  
   "Integrate Claude AI for automatic content moderation"

7. **Testing**:  
   "Create Playwright tests for user registration and post creation"

8. **Deployment**:  
   "Configure Lovable production deployment with custom domain"

---

### 12. Compliance & Maintenance
**GDPR Compliance**:
- Data anonymization pipeline for deleted accounts
- Right-to-export feature
- Cookie consent management

**Backup Strategy**:
1. Daily automated Supabase backups
2. Weekly offsite backups to encrypted S3
3. Point-in-time recovery (PITR) enabled

**Monitoring**:
- Key metrics: API latency, error rates, active connections
- Alert thresholds: >5% error rate, >2s latency
- Monthly security audit reports

---

### 13. Cost Optimization
**Resource Management**:
- DB: Auto-vacuum configuration
- Storage: Lifecycle rules for old media
- Bandwidth: Image compression at upload
- Functions: Configure memory/time limits

**Pricing Forecast**:
- Launch (1K users): $29/mo
- Growth (10K users): $129/mo
- Scale (50K users): $499/mo

---

### 14. Development Timeline
| Phase | Duration | Deliverables |
|-------|----------|--------------|
| Setup | 3 days | Project config, auth flow |
| Core Features | 2 weeks | Profiles, posts, feed |
| Social Features | 1 week | Comments, likes, follows |
| Realtime | 4 days | Notifications, live updates |
| Moderation | 3 days | AI integration, reporting |
| Testing | 5 days | E2E tests, security scan |
| Deployment | 2 days | CI/CD, monitoring |

**Total**: 6 weeks to MVP launch

---

### 15. Risk Mitigation
1. **Performance Bottlenecks**:
   - Database load testing during development
   - Query optimization checklist
   - Caching strategy implementation

2. **Moderation Challenges**:
   - Human-in-the-loop review system
   - Appeal process for flagged content
   - Continuous AI model retraining

3. **Scalability Limits**:
   - Architectural review at 5K users
   - Load testing simulations
   - Database sharding blueprint

This blueprint provides a production-ready foundation for a scalable social media application leveraging Lovable 2.0's full capabilities. All components are designed for visual development while maintaining enterprise-grade standards.